/**
 * Vector is a heap-allocated, length-prefixed, fixed-length collection type.
 */
struct Vector[T] {
    public var length: Size;
    var data: Ptr[T];

    public static function new(allocator: Box[Allocator], length: Size): Vector[T] {
        var data: Ptr[T] = allocator.alloc(sizeof T * length);
        return struct Vector[T] {
            length,
            data,
        };
    }

    rules {
        ($this[$i]) => $this.data[$i];

        // optimize Vector iteration at compile time when the type is known
        (for $ident in $this {$e}) => {
            var __length = $this.length;
            for __i in 0 ... __length {
                var $ident = $this.data[__i];
                {$e}
            }
        }
    }

    public function blit(other: Ptr[Vector[T]], start: Size, length: Size): Void {
        memcpy(&(other.data[start]) as Ptr[Void], this.data as Ptr[Void], length * sizeof T);
    }

    public function copy(allocator: Box[Allocator]): Vector[T] using implicit allocator {
        var v = Self.new(this.length);
        this.blit(v, 0, this.length);
        return v;
    }

    public function free(allocator: Box[Allocator]) {
        allocator.free(this.data);
    }
}
